@@DIRETTIVE INTERPRETE;;
--DEBUG MODE ON;;
--PRINT ENV ON;;
--PRINT STORE ON;;
--SAFE MODE OFF;;
@@TIPI PRIMITIVI;;
5;;
true;;
"prova";;

@@OPERAZIONI SU BOOL;;
true or false;;
true and false;;
!true;;

@@OPERAZIONI SU INT;;
-7;;
5*8;;
5+2;;
3-2;;

@@TEST SU INT;;
5==8;;
iszero(7);;

@@ESPRESSIONI COMPOSTE;;
if(true) then print(true) else print(false);;


@@DICHIARAZIONI VARIABILI;;
eint p = 10;;
estring a = "prova";;
ebool b = true;;
@@ASSEGNAMENTO;;
p = 1;; 
a = "prova1";;
b = false;;
@@COSTANTI;;
const estring costante = "aa";;
@@costante = "bb";;

eint (5,T) * eint(6,U);;
@@FUNZIONI NELL'AMBIENTE;;
@@NORMALI;;
let rec function fact(x) = (if(x == 0) then 1 else x*runf fact(x-1)) in print(runf fact(5));;





@@FUNZIONI RICHIAMABILI 
@@RICORSIVE;;
rec function factm(x) = (if(x == 0) then 1 else x*runf factm(x-1));;
print(runf factm(5));;

@@NORMALI;;
function fr(x) = if(true) then 1 else 2;;
@@CHIAMATA FUNZIONE;;
print(runf fr(10));;

@@PROCEDURE;;
eint t = 5;;
eint y = 0;;
rec function fact(x) = if ( x == 0) then 1 else x*(runf fact(x-1));;
procedure impfact(x) = {
		eint z = x;
		eint w = 1,
                while(!(z == 0)) do (w = z*w; z = z-1);
		cif (w == (runf fact(x))) then (y = w) else (y = 0)
};;

@@CHIAMATA PROCEDURE;;
runp impfact(t);;
print(y);;

@@FUNZIONI AUSILIARIE SU STRINGHE;;
len("prova");;
substr("prova",2,3);;
"ciao"."prova";;

@@COMANDI;;
eint c = 5;;
c = 8;;
cif(true) then c=7;c=8;c=9 else c=9;;
while(c!=0) do (c = c - 1);;

@@BLOCCHI;;

{
    eint pippo = 50,
    [],
    pippo = 100
};;

@@FUNZIONE DI REFLECT;;
reflect("print(eint(5,U))|print(eint(7,U))|print(eint(9,U))|eint tai = (10,U)");;
reflect("reflect(\"5\")|print(5)");;

let xtt = 1 + 5 in let z = xtt + 4 in print(z);;
